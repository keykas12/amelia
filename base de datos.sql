BEGIN;                                                    -- Inicia la transacción: todo o nada

-- =======================================================
-- Esquema y tipos ENUM
-- =======================================================
CREATE SCHEMA IF NOT EXISTS zap;                          -- Crea el esquema lógico 'zap' si no existe
SET search_path = zap, public;                            -- Usa 'zap' como esquema por defecto (luego 'public')

DO $$                                                     -- Bloque anónimo para crear tipos ENUM solo si no existen
BEGIN                                                     -- Inicio del bloque PL/pgSQL
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'articulo_tipo') THEN -- ¿Existe 'articulo_tipo'?
    CREATE TYPE zap.articulo_tipo AS ENUM ('MP','PT');    -- ENUM: 'MP' = Materia Prima, 'PT' = Producto Terminado
  END IF;                                                 -- Fin verificación de 'articulo_tipo'

  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'movimiento_tipo') THEN -- ¿Existe 'movimiento_tipo'?
    CREATE TYPE zap.movimiento_tipo AS ENUM               -- ENUM para clasificar movimientos de inventario (kardex)
      ('COMPRA_MP','CONSUMO_MP','PRODUCCION_PT','VENTA_PT','AJUSTE_ENTRADA','AJUSTE_SALIDA'); -- Valores válidos
  END IF;                                                 -- Fin verificación de 'movimiento_tipo'

  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'bodega_tipo') THEN -- ¿Existe 'bodega_tipo'?
    CREATE TYPE zap.bodega_tipo AS ENUM ('MP','PT');      -- ENUM: tipo de bodega (MP o PT)
  END IF;                                                 -- Fin verificación de 'bodega_tipo'
END;                                                      -- Cierre del bloque PL/pgSQL
$$;                                                       -- Fin del bloque DO

-- =======================================================
-- Geografía
-- =======================================================
CREATE TABLE IF NOT EXISTS departamentos (                -- Catálogo de departamentos/regiones
  id_departamento  integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY (estándar SQL)
  codigo           varchar(10),                           -- Código opcional (p.ej., DANE)
  nombre           varchar(80)  NOT NULL,                 -- Nombre del departamento
  activo           boolean      NOT NULL DEFAULT true,    -- Estado lógico
  UNIQUE (nombre),                                        -- Evita nombres duplicados
  UNIQUE (codigo)                                         -- Evita códigos duplicados (si se usa)
);                                                        -- Fin tabla departamentos

CREATE TABLE IF NOT EXISTS ciudades (                     -- Catálogo de ciudades/municipios
  id_ciudad        integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_departamento  integer NOT NULL REFERENCES zap.departamentos(id_departamento) ON DELETE RESTRICT, -- FK a departamentos (sin CASCADE)
  codigo           varchar(10),                           -- Código opcional (p.ej., DANE)
  nombre           varchar(100) NOT NULL,                 -- Nombre de la ciudad
  activo           boolean      NOT NULL DEFAULT true,    -- Estado lógico
  UNIQUE (id_departamento, nombre),                       -- Evita repetir nombre de ciudad dentro del mismo dpto
  UNIQUE (id_departamento, codigo)                        -- Evita códigos duplicados por departamento
);                                                        -- Fin tabla ciudades
CREATE INDEX IF NOT EXISTS idx_ciudades_depto_nombre ON zap.ciudades(id_departamento, nombre); -- Índice por dpto+nombre

-- =======================================================
-- Catálogos base
-- =======================================================
CREATE TABLE IF NOT EXISTS unidades (                     -- Unidades de medida (PAR, UND, KG, LT, ...)
  id_unidad  integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  codigo     varchar(10) NOT NULL UNIQUE,                -- Código abreviado único (p.ej. 'PAR')
  nombre     varchar(50) NOT NULL,                       -- Nombre descriptivo (p.ej. 'Par')
  activo     boolean NOT NULL DEFAULT true               -- Estado lógico
);                                                        -- Fin tabla unidades

CREATE TABLE IF NOT EXISTS bodegas (                      -- Bodegas físicas/lógicas
  id_bodega  integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  nombre     varchar(100) NOT NULL UNIQUE,               -- Nombre único (ej: 'I1-MP', 'I2-PT')
  tipo       zap.bodega_tipo NOT NULL,                   -- Tipo de bodega: 'MP' o 'PT'
  activo     boolean NOT NULL DEFAULT true               -- Estado lógico
);                                                        -- Fin tabla bodegas

CREATE TABLE IF NOT EXISTS mp_tipos (                     -- Tipos de Materia Prima
  id_mp_tipo integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  codigo     varchar(20)  NOT NULL UNIQUE,              -- Código único (ej: 'PEGANTE','CUERO')
  nombre     varchar(60)  NOT NULL                      -- Nombre legible
);                                                        -- Fin tabla mp_tipos

CREATE TABLE IF NOT EXISTS tallas (                       -- Tallas de calzado
  id_talla  integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  valor     integer NOT NULL UNIQUE,                     -- Valor numérico de talla (ej: 35, 36)
  etiqueta  varchar(10)                                  -- Etiqueta opcional (texto mostrado)
);                                                        -- Fin tabla tallas

CREATE TABLE IF NOT EXISTS tipos_sandalia (               -- Tipos de sandalia
  id_tipo_sandalia integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  codigo           varchar(20) NOT NULL UNIQUE,          -- Código único (ej: 'PLANA','PLATAFORMA')
  nombre           varchar(60) NOT NULL                  -- Nombre legible
);                                                        -- Fin tabla tipos_sandalia

CREATE TABLE IF NOT EXISTS marcas (                       -- Marcas para MP/PT
  id_marca integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  nombre   varchar(80) NOT NULL UNIQUE,                  -- Nombre de la marca (único)
  activo   boolean NOT NULL DEFAULT true                 -- Estado lógico
);                                                        -- Fin tabla marcas

CREATE TABLE IF NOT EXISTS categorias_pt (                -- Categorías para Productos Terminados
  id_categoria_pt integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  nombre          varchar(80) NOT NULL UNIQUE,           -- Nombre de la categoría (único)
  activo          boolean NOT NULL DEFAULT true          -- Estado lógico
);                                                        -- Fin tabla categorias_pt

CREATE TABLE IF NOT EXISTS subcategorias_pt (             -- Subcategorías por categoría PT
  id_categoria_pt    integer NOT NULL REFERENCES zap.categorias_pt(id_categoria_pt) ON DELETE RESTRICT, -- FK a categorías PT
  id_subcategoria_pt integer GENERATED BY DEFAULT AS IDENTITY, -- ID de subcategoría (parte de la PK compuesta)
  nombre             varchar(80) NOT NULL,               -- Nombre de la subcategoría
  activo             boolean NOT NULL DEFAULT true,       -- Estado lógico
  PRIMARY KEY (id_categoria_pt, id_subcategoria_pt),     -- PK compuesta por categoría y subcategoría
  UNIQUE (id_categoria_pt, nombre)                        -- Evita duplicar nombres dentro de la misma categoría
);                                                        -- Fin tabla subcategorias_pt

-- =======================================================
-- Artículos (maestro MP/PT)
--   Regla operativa: PT se maneja en PAR (pares) desde la app
-- =======================================================
CREATE TABLE IF NOT EXISTS articulos (                    -- Maestro de artículos: MP y PT base
  id_articulo        bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  tipo               zap.articulo_tipo NOT NULL,          -- Tipo de artículo: 'MP' o 'PT'
  codigo             varchar(30) NOT NULL UNIQUE,         -- Código interno único
  nombre             varchar(120) NOT NULL,               -- Nombre/Descripción
  id_unidad          integer NOT NULL REFERENCES zap.unidades(id_unidad) ON DELETE RESTRICT, -- FK a unidades (sin CASCADE)
  id_mp_tipo         integer REFERENCES zap.mp_tipos(id_mp_tipo) ON DELETE RESTRICT,         -- FK opcional (solo MP)
  id_marca           integer REFERENCES zap.marcas(id_marca) ON DELETE RESTRICT,             -- FK opcional a marcas
  id_categoria_pt    integer REFERENCES zap.categorias_pt(id_categoria_pt) ON DELETE RESTRICT, -- FK opcional (PT)
  id_subcategoria_pt integer,                             -- Columna que completa la FK compuesta con subcategorias_pt (opcional)
  estado             char(1) NOT NULL DEFAULT 'A' CHECK (estado IN ('A','I')), -- Estado lógico
  creado_en          timestamptz NOT NULL DEFAULT now(),  -- Timestamp de creación
  actualizado_en     timestamptz NOT NULL DEFAULT now(),  -- Timestamp de última actualización
  CONSTRAINT fk_articulos_subcat_pt                       -- Nombre de la FK compuesta a subcategorias_pt
    FOREIGN KEY (id_categoria_pt, id_subcategoria_pt)     -- Claves locales (ambas deben no ser NULL para validar)
    REFERENCES zap.subcategorias_pt (id_categoria_pt, id_subcategoria_pt) -- Tabla/columnas de referencia
    ON DELETE RESTRICT                                    -- Sin borrado en cascada
);                                                        -- Fin tabla articulos
CREATE INDEX IF NOT EXISTS idx_articulos_mp_tipo   ON zap.articulos(id_mp_tipo);              -- Índice por tipo de MP
CREATE INDEX IF NOT EXISTS idx_articulos_marca     ON zap.articulos(id_marca);                -- Índice por marca
CREATE INDEX IF NOT EXISTS idx_articulos_cat_pt    ON zap.articulos(id_categoria_pt);         -- Índice por categoría PT
CREATE INDEX IF NOT EXISTS idx_articulos_subcat_pt ON zap.articulos(id_categoria_pt, id_subcategoria_pt); -- Índice por cat/subcat

-- =======================================================
-- Variantes de PT (PT x talla x tipo_sandalia)
-- =======================================================
CREATE TABLE IF NOT EXISTS pt_variantes (                 -- Variantes (SKU) de un PT base
  id_pt_var         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_articulo_pt    bigint  NOT NULL REFERENCES zap.articulos(id_articulo) ON DELETE RESTRICT, -- FK al PT base
  id_talla          integer NOT NULL REFERENCES zap.tallas(id_talla) ON DELETE RESTRICT,       -- FK a talla
  id_tipo_sandalia  integer NOT NULL REFERENCES zap.tipos_sandalia(id_tipo_sandalia) ON DELETE RESTRICT, -- FK a tipo sandalia
  codigo_variante   varchar(40) NOT NULL UNIQUE,          -- Código único de variante (SKU)
  activo            boolean NOT NULL DEFAULT true,        -- Estado lógico
  UNIQUE (id_articulo_pt, id_talla, id_tipo_sandalia)     -- Evita duplicar la misma combinación de variante
);                                                        -- Fin tabla pt_variantes
CREATE INDEX IF NOT EXISTS idx_pt_var_art_talla ON zap.pt_variantes(id_articulo_pt, id_talla); -- Índice por PT y talla

-- =======================================================
-- BOM (recetas: MP que componen un PT)
-- =======================================================
CREATE TABLE IF NOT EXISTS bom (                          -- Lista de materiales por PT
  id_bom         bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  producto_pt_id bigint NOT NULL REFERENCES zap.articulos(id_articulo) ON DELETE RESTRICT,   -- PT destino (artículo)
  insumo_mp_id   bigint NOT NULL REFERENCES zap.articulos(id_articulo) ON DELETE RESTRICT,   -- MP requerido (artículo)
  cantidad       numeric(12,3) NOT NULL CHECK (cantidad > 0), -- Cantidad de MP por 1 par de PT (permite decimales)
  UNIQUE (producto_pt_id, insumo_mp_id)                   -- Evita duplicar mismo insumo en la receta del PT
);                                                        -- Fin tabla bom
CREATE INDEX IF NOT EXISTS idx_bom_producto ON zap.bom(producto_pt_id); -- Índice por PT destino
CREATE INDEX IF NOT EXISTS idx_bom_insumo   ON zap.bom(insumo_mp_id);   -- Índice por MP insumo

-- =======================================================
-- Terceros (clientes y proveedores)
-- =======================================================
CREATE TABLE IF NOT EXISTS clientes (                     -- Tabla de clientes
  id_cliente  bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  tipo_id     varchar(10)  NOT NULL,                      -- Tipo de identificación (CC, NIT, etc.)
  num_id      varchar(30)  NOT NULL,                      -- Número de identificación
  nombre      varchar(150) NOT NULL,                      -- Nombre/Razón social
  email       varchar(120),                               -- Email opcional
  telefono    varchar(40),                                -- Teléfono opcional
  id_ciudad   integer REFERENCES zap.ciudades(id_ciudad) ON DELETE RESTRICT, -- FK a ciudad (opcional)
  activo      boolean NOT NULL DEFAULT true,              -- Estado lógico
  UNIQUE (tipo_id, num_id)                                -- Evita duplicar el mismo documento
);                                                        -- Fin tabla clientes

CREATE TABLE IF NOT EXISTS proveedores (                  -- Tabla de proveedores
  id_proveedor bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  tipo_id      varchar(10)  NOT NULL,                     -- Tipo de identificación
  num_id       varchar(30)  NOT NULL,                     -- Número de identificación
  nombre       varchar(150) NOT NULL,                     -- Nombre/Razón social
  email        varchar(120),                              -- Email opcional
  telefono     varchar(40),                               -- Teléfono opcional
  id_ciudad    integer REFERENCES zap.ciudades(id_ciudad) ON DELETE RESTRICT, -- FK a ciudad (opcional)
  activo       boolean NOT NULL DEFAULT true,             -- Estado lógico
  UNIQUE (tipo_id, num_id)                                -- Evita duplicar el mismo documento
);                                                        -- Fin tabla proveedores

-- =======================================================
-- Pedidos (cabecera) y detalle por variante
-- =======================================================
CREATE TABLE IF NOT EXISTS pedidos (                      -- Cabecera de pedido de cliente
  id_pedido      bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  fecha          date NOT NULL DEFAULT current_date,      -- Fecha del pedido
  id_cliente     bigint REFERENCES zap.clientes(id_cliente) ON DELETE RESTRICT,   -- FK opcional a cliente
  cliente        text,                                    -- Texto libre si no usas id_cliente (nombre del cliente)
  observacion    text,                                    -- Observaciones del pedido
  estado         varchar(20) NOT NULL DEFAULT 'PENDIENTE' -- Estado del pedido
                  CHECK (estado IN ('PENDIENTE','EN_PRODUCCION','CERRADO')) -- Estados válidos
);                                                        -- Fin tabla pedidos

CREATE TABLE IF NOT EXISTS pedidos_detalle (              -- Detalle del pedido por variante de PT
  id_pedido        bigint NOT NULL REFERENCES zap.pedidos(id_pedido) ON DELETE RESTRICT, -- FK a cabecera de pedido
  id_pt_var        bigint NOT NULL REFERENCES zap.pt_variantes(id_pt_var) ON DELETE RESTRICT, -- FK a variante de PT
  cantidad_pares   integer NOT NULL CHECK (cantidad_pares > 0), -- Cantidad de pares solicitados
  observacion      text,                                    -- Observación de la línea
  PRIMARY KEY (id_pedido, id_pt_var)                        -- Una variante única por pedido
);                                                         -- Fin tabla pedidos_detalle
CREATE INDEX IF NOT EXISTS idx_ped_det_var ON zap.pedidos_detalle(id_pt_var); -- Índice por variante

-- =======================================================
-- Órdenes de Producción (OP)
-- =======================================================
CREATE TABLE IF NOT EXISTS ordenes_produccion (           -- Órdenes de producción
  id_op          bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_pedido      bigint REFERENCES zap.pedidos(id_pedido) ON DELETE SET NULL,     -- FK opcional a pedido; si borran, queda NULL
  producto_pt_id bigint NOT NULL REFERENCES zap.articulos(id_articulo) ON DELETE RESTRICT, -- PT base a producir
  id_pt_var      bigint     REFERENCES zap.pt_variantes(id_pt_var) ON DELETE RESTRICT,     -- Variante específica (opcional)
  cantidad       integer NOT NULL CHECK (cantidad > 0),   -- Cantidad a producir (en pares)
  fecha          date NOT NULL DEFAULT current_date,      -- Fecha de la OP
  estado         varchar(12) NOT NULL DEFAULT 'ABIERTA'   -- Estado de la OP
                  CHECK (estado IN ('ABIERTA','CERRADA')) -- Estados válidos
);                                                        -- Fin tabla ordenes_produccion
CREATE INDEX IF NOT EXISTS idx_op_producto ON zap.ordenes_produccion(producto_pt_id); -- Índice por PT base
CREATE INDEX IF NOT EXISTS idx_op_pt_var  ON zap.ordenes_produccion(id_pt_var);       -- Índice por variante

-- =======================================================
-- Movimientos de inventario (Kardex) – sin costos
--  *Cantidad ahora es NUMERIC(12,3) para permitir decimales en MP.
--  *Para PT, la app debe enviar enteros (pares), aunque la columna soporte decimales.
-- =======================================================
CREATE TABLE IF NOT EXISTS movimientos (                  -- Movimientos de inventario
  id_mov      bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  fecha       timestamptz NOT NULL DEFAULT now(),         -- Fecha/hora del movimiento
  id_bodega   integer NOT NULL REFERENCES zap.bodegas(id_bodega) ON DELETE RESTRICT, -- FK a bodega
  id_articulo bigint  NOT NULL REFERENCES zap.articulos(id_articulo) ON DELETE RESTRICT, -- FK al artículo (MP/PT)
  id_pt_var   bigint      REFERENCES zap.pt_variantes(id_pt_var) ON DELETE RESTRICT,     -- FK a variante (usar en PT; NULL en MP)
  tipo        zap.movimiento_tipo NOT NULL,               -- Tipo de movimiento (ENUM)
  cantidad    numeric(12,3) NOT NULL CHECK (cantidad <> 0), -- **DECIMAL**: MP permite fracciones; PT manejar pares enteros desde app
  doc_ref     varchar(40),                                -- Documento de referencia (texto libre)
  observacion text                                        -- Observación libre
);                                                        -- Fin tabla movimientos
CREATE INDEX IF NOT EXISTS idx_mov_articulo_fecha ON zap.movimientos(id_articulo, fecha DESC); -- Índice por artículo y fecha
CREATE INDEX IF NOT EXISTS idx_mov_bodega_fecha   ON zap.movimientos(id_bodega,  fecha DESC); -- Índice por bodega y fecha
CREATE INDEX IF NOT EXISTS idx_mov_pt_var_fecha   ON zap.movimientos(id_pt_var,  fecha DESC); -- Índice por variante PT y fecha

-- =======================================================
-- Seguridad / Login (RBAC + sesiones + auditoría)
-- =======================================================
CREATE TABLE IF NOT EXISTS roles (                        -- Catálogo de roles
  id_rol   integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  codigo   varchar(20)  NOT NULL UNIQUE,                 -- Código de rol (ej: 'ADMIN','ENCARGADO')
  nombre   varchar(60)  NOT NULL,                        -- Nombre legible
  descripcion text,                                      -- Descripción del rol
  activo   boolean NOT NULL DEFAULT true                 -- Estado lógico
);                                                        -- Fin tabla roles

CREATE TABLE IF NOT EXISTS usuarios (                     -- Usuarios del sistema
  id_usuario     bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  username       varchar(40)  NOT NULL UNIQUE,           -- Usuario único
  email          varchar(120) UNIQUE,                    -- Email único (opcional)
  password_hash  varchar(255) NOT NULL,                  -- Hash de contraseña (bcrypt/argon2)
  nombre         varchar(150) NOT NULL,                  -- Nombre para mostrar
  telefono       varchar(40),                            -- Teléfono (opcional)
  id_ciudad      integer REFERENCES zap.ciudades(id_ciudad) ON DELETE RESTRICT, -- FK a ciudad (opcional)
  activo         boolean      NOT NULL DEFAULT true,     -- Estado lógico
  ultimo_acceso  timestamptz,                            -- Último acceso (login)
  creado_en      timestamptz  NOT NULL DEFAULT now(),    -- Fecha de creación
  actualizado_en timestamptz  NOT NULL DEFAULT now()     -- Fecha de actualización
);                                                        -- Fin tabla usuarios

CREATE TABLE IF NOT EXISTS usuario_rol (                  -- Relación N:M usuario ↔ rol
  id_usuario bigint  NOT NULL REFERENCES zap.usuarios(id_usuario) ON DELETE RESTRICT, -- FK a usuarios
  id_rol     integer NOT NULL REFERENCES zap.roles(id_rol)        ON DELETE RESTRICT, -- FK a roles
  PRIMARY KEY (id_usuario, id_rol)                        -- PK compuesta: un rol por usuario (sin duplicar)
);                                                        -- Fin tabla usuario_rol
CREATE INDEX IF NOT EXISTS idx_usuario_rol_rol ON zap.usuario_rol(id_rol); -- Índice por rol (listar usuarios de un rol)

CREATE TABLE IF NOT EXISTS sesiones (                     -- Sesiones activas (tokens)
  id_sesion    bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_usuario   bigint NOT NULL REFERENCES zap.usuarios(id_usuario) ON DELETE RESTRICT, -- FK a usuario
  token        varchar(128) NOT NULL UNIQUE,             -- Token de sesión (ej. UUID/JWT ID)
  valido_hasta timestamptz NOT NULL,                     -- Expiración de la sesión
  ip           inet,                                     -- IP de origen (opcional)
  user_agent   text,                                     -- Agente de usuario (opcional)
  activo       boolean NOT NULL DEFAULT true,            -- Estado de la sesión
  creado_en    timestamptz NOT NULL DEFAULT now(),       -- Fecha de creación
  cerrado_en   timestamptz                               -- Fecha de cierre (si aplica)
);                                                        -- Fin tabla sesiones
CREATE INDEX IF NOT EXISTS idx_sesiones_usuario ON zap.sesiones(id_usuario); -- Índice por usuario

CREATE TABLE IF NOT EXISTS login_intentos (               -- Auditoría de intentos de login
  id_evento      bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_usuario     bigint REFERENCES zap.usuarios(id_usuario) ON DELETE RESTRICT,  -- FK a usuario (puede ser NULL si no existe)
  username_email varchar(120),                           -- Usuario/email intentado
  exito          boolean NOT NULL,                       -- Resultado (true/false)
  motivo         text,                                   -- Motivo (credenciales inválidas, bloqueo, etc.)
  ip             inet,                                   -- IP del intento
  user_agent     text,                                   -- Agente de usuario
  creado_en      timestamptz NOT NULL DEFAULT now()      -- Fecha/hora del intento
);                                                        -- Fin tabla login_intentos
CREATE INDEX IF NOT EXISTS idx_login_intentos_usuario ON zap.login_intentos(id_usuario); -- Índice por usuario
CREATE INDEX IF NOT EXISTS idx_login_intentos_fecha   ON zap.login_intentos(creado_en);  -- Índice por fecha

CREATE TABLE IF NOT EXISTS password_resets (             -- Tokens de restablecimiento de contraseña
  id_reset   bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, -- PK con IDENTITY
  id_usuario bigint NOT NULL REFERENCES zap.usuarios(id_usuario) ON DELETE RESTRICT, -- FK a usuario
  token      varchar(128) NOT NULL UNIQUE,              -- Token único de reset
  expira_en  timestamptz  NOT NULL,                     -- Fecha/hora de expiración
  usado      boolean      NOT NULL DEFAULT false,       -- Indicador si ya se usó
  creado_en  timestamptz  NOT NULL DEFAULT now()        -- Fecha de creación
);                                                       -- Fin tabla password_resets
CREATE INDEX IF NOT EXISTS idx_pwreset_usuario ON zap.password_resets(id_usuario); -- Índice por usuario

COMMIT;                                                 -- Confirma todos los cambios de la transacción
